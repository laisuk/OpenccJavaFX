name: JPackage (Linux / Windows / macOS)

on:
  workflow_dispatch:

jobs:
  jpackage:
    name: jpackage (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            os_tag: linux
            gradle_cmd: ./gradlew
          - os: windows-latest
            os_tag: windows
            gradle_cmd: .\gradlew.bat
          - os: macos-latest
            os_tag: macos
            gradle_cmd: ./gradlew

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Temurin JDK 17 (with jpackage)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: gradle

      - name: Install Linux packaging deps (lean)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            fakeroot desktop-file-utils xz-utils binutils rpm      

      # Windows: WiX for MSI
      - name: Install WiX Toolset (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          choco install wixtoolset --no-progress -y
          $wixPath = "C:\Program Files (x86)\WiX Toolset v3.14\bin"
          if (-not (Test-Path $wixPath)) { $wixPath = "C:\Program Files (x86)\WiX Toolset v3.11\bin" }
          if (-not (Test-Path $wixPath)) { throw "WiX bin folder not found." }
          "WIX=$wixPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          $wixPath | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          & "$wixPath\candle.exe" -? | Out-Null
          & "$wixPath\light.exe"  -? | Out-Null

      - name: Make gradlew executable (non-Windows)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: chmod +x gradlew

      # Show versions
      - name: Show Java & Gradle versions (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          java -version
          ${{ matrix.gradle_cmd }} --version

      - name: Show Java & Gradle versions (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          java -version
          ${{ matrix.gradle_cmd }} --version

      # Build installers
      - name: Build Windows MSI
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          ${{ matrix.gradle_cmd }} --no-daemon clean jpackage -PinstallerType=msi

      - name: Build Linux DEB (+ RPM) into separate dirs
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          set -euo pipefail

          # Build DEB into its own folder
          ${{ matrix.gradle_cmd }} --no-daemon clean jpackage \
            -PinstallerType=deb \
            -PinstallerOut=build/installer/deb

          # Build RPM into its own folder (no clean now)
          ${{ matrix.gradle_cmd }} --no-daemon jpackage \
            -PinstallerType=rpm \
            -PinstallerOut=build/installer/rpm

          # Assert a .deb exists (quiet unless missing)
          shopt -s globstar nullglob
          debs=(build/installer/**/*.deb build/jpackage/**/*.deb)
          if (( ${#debs[@]} == 0 )); then
            echo "::error::No .deb file generated." >&2
            exit 1
          fi      

      - name: Build macOS DMG
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          ${{ matrix.gradle_cmd }} --no-daemon clean jpackage -PinstallerType=dmg

      # Artifacts (installers + app-image for inspection)
      - name: Upload app image folder
        uses: actions/upload-artifact@v4
        with:
          name: app-image-${{ matrix.os_tag }}
          # exclude Windows/macOS installers from the app-image artifact
          path: |
            build/jpackage/**
            !build/jpackage/*.msi
            !build/jpackage/*.dmg
            !build/jpackage/*.pkg
          if-no-files-found: ignore

      - name: Upload native installers (msi/deb/rpm/dmg/pkg)
        uses: actions/upload-artifact@v4
        with:
          name: installers-${{ matrix.os_tag }}
          path: |
            build/installer/**/*.deb
            build/installer/**/*.rpm
            build/jpackage/**/*.deb
            build/jpackage/**/*.rpm
            build/jpackage/**/*.msi
            build/jpackage/**/*.dmg
            build/jpackage/**/*.pkg
          if-no-files-found: ignore


